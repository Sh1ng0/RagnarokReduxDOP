/*
 * This file is generated by jOOQ.
 */
package com.ragnarok.engine.db.generated.tables;


import com.ragnarok.engine.db.generated.HelheimDb;
import com.ragnarok.engine.db.generated.Indexes;
import com.ragnarok.engine.db.generated.Keys;
import com.ragnarok.engine.db.generated.tables.records.ItemTemplatesRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Index;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ItemTemplates extends TableImpl<ItemTemplatesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>helheim_db.item_templates</code>
     */
    public static final ItemTemplates ITEM_TEMPLATES = new ItemTemplates();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ItemTemplatesRecord> getRecordType() {
        return ItemTemplatesRecord.class;
    }

    /**
     * The column <code>helheim_db.item_templates.id</code>.
     */
    public final TableField<ItemTemplatesRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>helheim_db.item_templates.category</code>.
     */
    public final TableField<ItemTemplatesRecord, String> CATEGORY = createField(DSL.name("category"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>helheim_db.item_templates.data</code>.
     */
    public final TableField<ItemTemplatesRecord, JSON> DATA = createField(DSL.name("data"), SQLDataType.JSON.nullable(false), this, "");

    private ItemTemplates(Name alias, Table<ItemTemplatesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ItemTemplates(Name alias, Table<ItemTemplatesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>helheim_db.item_templates</code> table reference
     */
    public ItemTemplates(String alias) {
        this(DSL.name(alias), ITEM_TEMPLATES);
    }

    /**
     * Create an aliased <code>helheim_db.item_templates</code> table reference
     */
    public ItemTemplates(Name alias) {
        this(alias, ITEM_TEMPLATES);
    }

    /**
     * Create a <code>helheim_db.item_templates</code> table reference
     */
    public ItemTemplates() {
        this(DSL.name("item_templates"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : HelheimDb.HELHEIM_DB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ITEM_TEMPLATES_IDX_CATEGORY);
    }

    @Override
    public UniqueKey<ItemTemplatesRecord> getPrimaryKey() {
        return Keys.KEY_ITEM_TEMPLATES_PRIMARY;
    }

    @Override
    public ItemTemplates as(String alias) {
        return new ItemTemplates(DSL.name(alias), this);
    }

    @Override
    public ItemTemplates as(Name alias) {
        return new ItemTemplates(alias, this);
    }

    @Override
    public ItemTemplates as(Table<?> alias) {
        return new ItemTemplates(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ItemTemplates rename(String name) {
        return new ItemTemplates(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ItemTemplates rename(Name name) {
        return new ItemTemplates(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ItemTemplates rename(Table<?> name) {
        return new ItemTemplates(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ItemTemplates where(Condition condition) {
        return new ItemTemplates(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ItemTemplates where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ItemTemplates where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ItemTemplates where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ItemTemplates where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ItemTemplates where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ItemTemplates where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ItemTemplates where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ItemTemplates whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ItemTemplates whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
